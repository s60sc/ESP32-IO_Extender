<!DOCTYPE html>   
<!-- 
  s60sc 2022 
-->     
<html>     
  <head>
    <meta charset="UTF-8"/>  
    <title>IO Extender</title>
  
    <style>
      :root {
        /* colors used on web pages - see https://www.w3schools.com/colors/colors_names.asp */
        --buttonReady: silver;
        --buttonActive: #A0A0A0; /* mid gray */
        --buttonHover: #D0D0D0; /* light gray */
        --buttonText: white;
        --buttonLabel: black;
        --itemInactive: #F0F0F0; /* very light gray */
        --menuBackground: #404040; /* dark gray */
        --inputText: navy;
        --pageText: black; 
        --inputBackground: WhiteSmoke; 
        --itemBorder: silver; 
        --pageBackground: white;
      }
      body {
        font-family: Helvetica  !important;
        background: var(--pageBackground);
        color: var(--pageText);
      }
      
      .fixed {
        position: fixed;
        top: 0;
      }
      /* Style the tab */
      .tab {
        overflow: hidden;
        border: 1px solid var(--itemBorder);
        background-color: var(--menuBackground);
      }

      /* Style the buttons inside the tab */
      .tab button {
        background-color: var(--buttonReady);
        float: center;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
        font-size: 17px;
      }

      /* Change background color of buttons on hover */
      .tab button:hover {
        background-color: var(--buttonHover);
      }

      /* Create an active/current tablink class */
      .tab button.active {
        background-color: var(--buttonActive);
      }

      /* Style the tab content */
      .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 0px solid var(--itemBorder);
        border-top: none;
      }

     .grid-cols2 {
        grid-template-columns: 200px 200px;
      }

     .grid-cols4 {
        grid-template-columns: 200px 200px 200px 200px
      }

      .grid-cols2, .grid-cols4 {
        display: grid;
        background-color: none;
        text-align: center;
        font-size: 30px;
        border: 0px solid var(--itemBorder);
        dominant-baseline: middle;
        text-anchor: middle;
      }
      
      rect {
         fill: var(--buttonReady);
         width: 100%;
         height: 100%; 
         x: 0;
         y: 0;
         rx: 15%;
       }
      
      rect:hover {
        fill: var(--buttonHover);
      }
      
      rect:active {
        fill: var(--buttonActive);
      }
    
      text {
        pointer-events: none;
      }
      
      input, #applog  {
          font:20px 'Courier New';
          font-weight:bold;
          color: var(--inputText);
      }

      #applog {
        height:90%;
        width:90%;
        border:2px solid var(--itemBorder);
        overflow:auto;
      }
          
      .configGroup td {
        border:2px solid var(--itemBorder);
      }
      
      th, td {
        border-collapse: collapse;
        padding: 2px 3px;
        text-align: left;
      }
      table {
        border: 0px
      }
      th {
        font-weight:bold;
      }

    </style>
  </head>
  <body>
    <div class="tab fixed">
      <button class="tablinks active">Show Log</button>
      <button class="tablinks">Edit Config</button>
      <button class="tablinks">OTA Upload</button>
    </div>
    </br></br></br>
    <div id="ShowLog" class="tabcontent" style="display:block"; top:100px">
      <br/>
      <div class="grid-cols2">
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="clearWSlog" x="50%" y="50%" font-size="20" fill=var(--buttonLabel)>Clear Log</text>
          </svg>
        </div>
        <div>
          &nbsp;
        </div>
      </div>
      <pre id='applog' style="height:50vh;"></pre>
    </div>
    
    <div id="EditConfig" class="tabcontent">
      <h2>Control</h2>
      <div class="grid-cols4">
        <div>
          <svg width="150" height="40">
            <rect/>
      	      <text id="save" x="50%" y="50%" font-size="20" fill=var(--buttonLabel)>Save</text>
          </svg>
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="reset" x="50%" y="50%"font-size="20" fill=var(--buttonLabel)>Reboot ESP</text>
          </svg>
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="deldata" x="50%" y="50%" font-size="20" fill=var(--buttonLabel)>Reload /data</text>
          </svg>
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="clear" x="50%" y="50%" font-size="20" fill=var(--buttonLabel)>Clear NVS</text>
                                                     
          </svg>
        </div>
      </div>
      <br/>
      <h2>Settings</h2>
      <h3>Press a button to view or modify settings (changed values are not validated)</h3>
      <h3>Press Save button to make changes permanent</h3>
      <div class="grid-cols4">
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="wifi" x="50%" y="50%" font-size="20" fill=var(--buttonLabel)>Wifi</text>
          </svg>
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="peripherals" x="50%" y="50%" font-size="20" fill=var(--buttonLabel)>Peripherals</text>
          </svg>
        </div>
        <div>&nbsp;</div>
        <div>&nbsp;</div>
      </div>
      <div class="configGroup">
        <p id='configTable'></p>
      </div>
    </div>
           
    <div id="OTAUpload" class="tabcontent">
      <br/><br/>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input type="file" name="file1" id="file1" onchange="uploadFile()">
        <br/><br/>
        <progress id="progressOta" value="0" max="100" style="width:300px;"></progress>%
        <h3 id="status"></h3>
        <p id="loaded_n_total"></p>
      </form>
    </div>
    
    <script>

      /*********** initialisation functions ***********/
      
      const baseHost = window.location.origin;
      const wsServer = "ws://" + document.location.host + ":80/ws";
      let ws = null;
      let hbInterval = null;
      let statusData = {}; // stores all status data as key val pair
      let cfgGroupNow = -1;
      const $ = document.querySelector.bind(document);
      const $$ = document.querySelectorAll.bind(document);

      document.addEventListener("DOMContentLoaded", () => {
        try {
          initWebSocket();
          loadStatus(); 
        } catch (error) {sendLog("Error: " + error.message);}
        setListeners();
      });
      
      /*********** websocket functions ***********/
      
      // define websocket handling
      function initWebSocket() {
        sendLog("Connect to: " + wsServer);
        ws = new WebSocket(wsServer);
        ws.onopen = onOpen;
        ws.onclose = onClose;
        ws.onmessage = onMessage; 
        ws.onerror = onError;
      }
      
      // periodically check that connection is still up
      function heartbeat() {
        if (!ws) return;
        if (ws.readyState !== 1) return;
        sendCmd("H");
        clearTimeout(hbInterval);
        hbInterval = setTimeout(heartbeat, 30000);
      }
      
      // connect to websocket server
      function onOpen(event) {
        sendLog("Connected");
        heartbeat();
      }
      
      // process received WS message
      function onMessage(messageEvent) {    
        if (messageEvent.data.startsWith("{")) {
          // json data
          let updateData = JSON.parse(messageEvent.data);
          let filter = updateData.cfgGroup;
          delete updateData.cfgGroup;
          if (filter == "-1") {
            // status update
            Object.entries(updateData).forEach(([key, value]) => {
              statusData[key] = value;
              // replace each existing value with new value, using key name to match html tag id
              if ($('text#'+key)) $('text#'+key).textContent = value;
              else if ($('input[id="'+key+'"]')) $('input[id="'+key+'"]').value = value;
              processStatus(key, false);
            });
          } else {
            // format received config json into html table
            buildTable(updateData, filter);
          }
        } else addLogLine(messageEvent.data); 
      }
      
      function onError(event) {
        sendLog("WS Error: " + event.code);
      }
      
      function onClose(event) {
       sendLog("Disconnected: " + event.code + ' - ' + event.reason);
        // event.codes:
        //   1006 if server not available, or another web page is already open
        //   1005 if closed from app
        if (event.code == 1006) alert("Closed websocket as a newer connection was made, refresh browser page");
        else if (event.code != 1005) initWebSocket(); // retry if any other reason
      }
      
      /*********** page layout functions ***********/
    
      function openTab(evt, tabName) {
        // control tab viewing
        $$('.tabcontent').forEach(el => {el.style.display = "none";});
        $('#' + tabName).style.display = "block";
        $$('.tablinks').forEach(el => {el.classList.remove("active");});
        evt.classList.add("active");
      }

      function accordian(accId) {
        // accordian buttons to show / hide elements
        let panel = $('#' + accId);
        if (panel.style.display === "block") panel.style.display = "none";
        else panel.style.display = "block";
      }
      
       /*********** data processing functions ***********/
      
      async function loadStatus() {
        // request and load current status
        const response = await fetch(baseHost+'/status');
        if (response.ok) {
          statusData = await response.json();
          Object.entries(statusData).forEach(([key, value]) => {
            // replace each existing value with new value, using key name to match html tag id
            if ($('text#'+key)) $('text#'+key).textContent = value;
            else if ($('input[id="'+key+'"]')) $('input[id="'+key+'"]').value = value;
          });
          Object.keys(statusData).forEach(key => processStatus(key, false));
          await sleep(1000);
        } else console.log(response.status); 
      }
      
      function sendUpdates(doAction) {    
        // get each required update element and obtain id/name and value into array to send as json
        let jarray = {};
        jarray["action"] = doAction;
        $$('.update-action').forEach(el => {
          if (el.nodeName == "INPUT") jarray[el.getAttribute('id')] = el.value.trim();
        });
        // send as json to server
        fetch(baseHost + '/update', {
          method: 'POST', 
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(jarray),
        });
      }
      
      /*********** utility functions ***********/
      
      // add received line to log element
      function addLogLine(text) {
        let log = document.getElementById('applog');
        let new_node = document.createTextNode(text + "\n");
        log.append(new_node);
        // auto scroll new entry unless scroll bar is not at bottom
        const bottom = 40; // double font size
        const pos = Math.abs(log.scrollHeight - log.clientHeight - log.scrollTop);
        if (pos < bottom) log.scrollTop = log.scrollHeight;
      }
      
      function debounce(func, timeout = 500){
        // debounce rapid clicks to prevent unnecessary fetches
        let timer;
        return (...args) => {
          clearTimeout(timer);
          timer = setTimeout(() => { func.apply(this, args); }, timeout);
        };
      }
      
      const debounceSendControl = debounce((query) => fetch(baseHost + encodeURI('/control?' + query)));
      
      function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
      }
      
      /*********** command processing ***********/
      
      function setListeners() {
        // add event listener for change events
        setAppListeners();
        // add event listener for click events
        document.addEventListener("click", function (event) {
          // svg rect elements, use id of its following text node
          if (event.target.nodeName == 'rect') processStatus(event.target.nextElementSibling.id, true);
          // tab buttons, use button text as tab id
          if (event.target.classList.contains('tablinks')) openTab(event.target, event.target.innerHTML.replaceAll(' ', ''));
        });
        // input fields of given class
        document.addEventListener("change", function (event) {
          // config input fields 
         if (event.target.classList.contains('configItem')) { 
           fetch(baseHost + encodeURI('/control?' + event.target.name + '=' + event.target.value));
         }
        });
        // event listener to close web socket immediately on leaving page
        window.addEventListener('beforeunload', function (event) {
          if (ws) ws.terminate();
        });
      }
      
      function sendWsCmd() {
        // send user command to websocket server
        let txt = $('#txtCmd');
        let line = txt.value;
        if (line != "" && ws !== undefined) {
          sendCmd(line);
          txt.value = "";
          txt.focus();
        } else sendLog("No command or no connection");
      }
      
      function sendCmd(reqStr) {
        ws.send(reqStr);
        sendLog("Cmd: " + reqStr);
      }
      
      function sendLog(reqStr) {
        let date = new Date();
        addLogLine("[" + date.toLocaleTimeString() + " Web] " + reqStr);
      }
      
      function sendWsUpdates(doAction) {    
        // get each required update element and obtain id/name and value into array to send as json 
        let jarray = {};
        jarray["action"] = doAction;
        $$('.update-action').forEach(el => {
          if (el.nodeName == "INPUT") jarray[el.getAttribute('id')] = el.value.trim();
        });
        sendCmd('U' + JSON.stringify(jarray));
      }

      function processStatus(key, fromUser) {
        // called for each updated key
        if (key == "config") getConfig("0");
        else if (key == "save") debounceSendControl(key + '=1');
        else if (key == "reset") debounceSendControl(key + '=1');
        else if (key == "deldata") debounceSendControl(key + '=1');
        else if (key == "clear") debounceSendControl(key + '=1');
        else if (key == "clearWSlog") $('#applog').innerHTML = "";
        else processAppStatus(key, fromUser);
      }
      
      /*********** config functions ***********/
      
      async function getConfig(cfgGroup) {
        // request config json for selected group
        const response = await fetch('/status?123456789' + cfgGroup);
        if (response.ok) {
          const configData = await response.json();
          // format received json into html table
          buildTable(configData, cfgGroup);
        } else console.log(response.status); 
      }
      
      function buildTable(configData, cfgGroup) {
        // dynamically build table of editable settings
        const divShowData = document.getElementById('configTable');
        divShowData.innerHTML = "";
        if (cfgGroupNow != cfgGroup) {
          cfgGroupNow = cfgGroup;
          const table = document.createElement("table"); 
          // Create table header row from heading names
          const colHeaders = ['Setting Name', 'Setting Value']; 
          let tr = table.insertRow(-1); 
          for (let i = 0; i < colHeaders.length; i++) {
            let th = document.createElement("th");    
            th.innerHTML = colHeaders[i];
            tr.appendChild(th);
          }

          // add each setting as a row containing setting name and setting value
          let newRow = 1;
          Object.keys(configData).forEach( key => {
            if (key != "cfgGroup") { // skip over this entry    
              if (newRow) tr = table.insertRow(-1);
              let tabCell = tr.insertCell(-1);
              if (newRow) {
                tabCell.innerHTML = configData[key]; // name of setting
                newRow = 0;
              } else {
                // input field for value of setting
                tabCell.innerHTML = '<input type="text" class="configItem" name="' + key + '" value="' + configData[key] +'">'; 
                newRow = 1;
              }
            }
          })
          // add the newly created table at placeholder
          divShowData.appendChild(table);
        } else cfgGroupNow = -1;
      }

       /*********** OTA functions ***********/
       
      async function uploadFile() {
        // notify server to start ota task
        const response = await fetch('/control?startOTA=1');
        if (response.ok) {
          // submit file for uploading
          let file = $("#file1").files[0];
          let formdata = new FormData();
          formdata.append("file1", file);
          let ajax = new XMLHttpRequest();
          ajax.upload.addEventListener("progress", progressHandler, false);
          ajax.addEventListener("load", completeHandler, false);
          ajax.addEventListener("error", errorHandler, false);
          ajax.addEventListener("abort", abortHandler, false);
          ajax.open("POST", baseHost + ':82/upload');
          ajax.send(formdata);
        } else console.log(response.status); 
      }

      function progressHandler(event) {
        $("#loaded_n_total").innerHTML = "Uploaded " + event.loaded + " of " + event.total + " bytes";
        let percent = (event.loaded / event.total) * 100;
        $("#progressOta").value = Math.round(percent);
        $("#status").innerHTML = Math.round(percent) + "% transferred";
        if (event.loaded  == event.total) $("#status").innerHTML = 'Uploaded, wait for completion result';
      }

      function completeHandler(event) {
        $("#status").innerHTML = event.target.responseText;
        $("#progressOta").value = 0;
      }

      function errorHandler(event) {
        $("#status").innerHTML = "Upload Failed";
        $("#progressOta").value = 0;
      }

      function abortHandler(event) {
        $("#status").innerHTML = "Upload Aborted";
        $("#progressOta").value = 0;
      }

      /****************** app specific ********************/ 
      function processAppStatus(key, fromUser) {
        // called for each updated key
        if (key == "wifi") getConfig("0");
        else if (key == "peripherals") getConfig("0123");     
      }
      
      function setAppListeners() {
        // add event listener for custom change events
       }
      
    </script>
  </body>
</html>