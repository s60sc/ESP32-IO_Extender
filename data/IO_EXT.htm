
<!DOCTYPE html>   
<!-- 
  s60sc 2022 
-->     
<html>     
  <head>
    <meta charset="UTF-8"/>  
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>IO Extender</title>
    <link rel="icon" href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="80" font-size="100">â†”</text></svg>'>
    
    <style>
      :root {
        /* colors used on web pages - see https://www.w3schools.com/colors/colors_names.asp */
        --buttonReady: silver;
        --buttonActive: #A0A0A0; /* mid gray */
        --buttonHover: #D0D0D0; /* light gray */
        --buttonText: white;
        --buttonLabel: black;
        --itemInactive: #E0E0E0; /* very light gray */
        --menuBackground: silver;
        --inputText: navy;
        --pageText: black; 
        --inputBackground: whiteSmoke; 
        --alertMsg: red;                         
        --itemBorder: silver; 
        --pageBackground: white;
        
         /* logcolors */
        --warnColor: orange;
        --errColor: red;
        --chkColor: green;
        --dbgColor: blue;
     
        /* element sizes */
        --bodySize:1rem; /* used as basis for element, padding, and font sizes */
        --buttonSize: var(--bodySize);
        --buttonHalf: calc(var(--buttonSize) / 2);
        --buttonQuart: calc(var(--buttonSize) / 4);
        --buttonDbl: calc(var(--buttonSize) * 2);
        --inputSize: calc(var(--bodySize) * 0.9);
        --headingSize: calc(var(--bodySize) * 1.25);
        --subheadingSize: var(--bodySize);
        --footerSize: calc(var(--bodySize) * 0.7);   
      }

      body {
        font-family: Helvetica  !important;
        background: var(--pageBackground);
        color: var(--pageText);
        font-size: var(--bodySize);      
      }
      
      .hidden {
        display: none
      }
      
      progress {
        accent-color: var(--buttonActive); 
        width: calc(var(--buttonSize) * 15);
      }
      
      .fixed {
        position: fixed;
        top: 0;
      }

      .alertMsg {
        left:10%;
        bottom: var(--buttonDbl);
        position:absolute;
        display:block;
        color:var(--alertMsg);
        z-index:20;
        height: var(--buttonDbl);
      }
    
      .header {
        font-size: var(--headingSize);
        padding-left: var(--buttonHalf);
        font-weight:bold;
      }
      
      .subheader {
        font-style: italic;
        font-size: var(--subheadingSize);
        padding-left: var(--buttonQuart);
      }          
    
      .tab {
        display: flex;
        overflow: hidden;
        background: var(--menuBackground);
      }

      .tab button {
        background: var(--buttonReady);
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: var(--buttonHalf);
        transition: 0.3s;
        font-size: calc(var(--buttonSize) * 1.1);
      }

      .tab button.active {
        box-shadow: 0 0 0 var(--buttonQuart)  var(--buttonActive);
        background: var(--buttonActive);
      }
      
      .tab button.hover {
        background: var(--buttonHover);
      }

      .tab button.disabled {
        cursor: default;
        background: var(--itemInactive)
      }
      
      .tabcontent {
        display: none;
      }

      .grid-cols3 {
        grid-template-columns: calc(var(--buttonSize) * 12) calc(var(--buttonSize) * 12) calc(var(--buttonSize) * 12);
        display: grid;
        background: none;
        text-align: center;
        font-size: var(--inputSize);
        fill: var(--buttonLabel);
        border: 0px solid var(--itemBorder);
        dominant-baseline: middle;
        text-anchor: middle;
      }
      
      .cfgTitle {
        grid-column: 1/5;
        text-align: left;
      }
      
      svg {
        width: calc(var(--buttonSize) * 8);
        height: var(--buttonDbl);
      }
      
      rect {
        fill: var(--buttonReady);
        width: 100%;
        height: 100%; 
        x: 0;
        y: 0;
        ry: 15%;
      }
       
      rect:active {
        fill: var(--buttonActive);
      }
      
      rect:hover {
        fill: var(--buttonHover);
      }
    
      text {
        font-size: var(--buttonSize); 
        fill: var(--buttonText); 
        transform: translate(50%,50%);  
        pointer-events: none;
      }
      
      .panel {
        padding: 0 var(--buttonSize);
        display: none;
        background-color: var(--pageBackground);
        overflow: hidden;
      }
      
      button {
        display: block;
        margin: var(--buttonQuart);
        padding: var(--buttonQuart);
        border: 0;
        line-height: var(--headingSize);
        cursor: pointer;
        color: var(--buttonText);
        background: var(--buttonReady);
        border-radius: var(--buttonQuart);
        font-size: var(--buttonSize);
        outline: 0
      }
      
      button:active {
       box-shadow: 0 0 0 var(--buttonQuart) var(--buttonActive);
       background: var(--buttonActive);
      }

      button:hover {
        background: var(--buttonHover);
      }

      button:disabled {
        cursor: default;
        background: var(--itemInactive)
      }
      
      .input-group {
        position: relative;
        display: flex;
        flex-wrap: nowrap;
        line-height: var(--buttonDbl);
        margin-top: var(--buttonHalf);
      }
      
      .input-group>label {
        display: inline-block;
        padding-right: var(--buttonHalf);
        min-width: calc(var(--buttonSize)*7);
      }
      
      .input-group>input {
          width: 100%;
      }

      .input-group input,.input-group select {
        flex-grow: 1
      }
      
      input, #applog, #storedLog {
        font: var(--inputSize) 'Courier New';
        font-weight:bold;
        color: var(--inputText);
        background: var(--inputBackground);
        min-width: calc(var(--buttonSize) * 10);     
      }

      input[type="radio"], input[type="checkbox"], progress {
        accent-color: var(--buttonActive);
      }
      
      input[type="text"]{
        font-size: var(--inputSize); 
        width: calc(var(--buttonSize) * 6);
      }
      
      input[type="checkbox"] {
        width : calc(var(--inputSize) * 1.5);
        height : calc(var(--inputSize) * 1.5);
        margin-top: calc(var(--buttonQuart) * -1);
      }
      
      input[type="radio"] {
        width: var(--inputSize);
        height: var(--inputSize);
        min-width: var(--buttonSize);
      }
      
      input[type="number"]:not(.configItem), input[type="time"] {
        font-size: var(--buttonDbl);
        border: 1px solid var(--itemBorder);
        margin-bottom: var(--buttonQuart);
        min-width: calc(var(--buttonSize) * 7);
        text-align: center;
      } 
      
      input[type=number]::-webkit-inner-spin-button {
        opacity: 1
      }
      
      
      /* checkbox toggle switch slider */
            
      .switch {
        position: relative;
        display: inline-block;
        width: calc(var(--buttonSize) * 2);
        height: var(--buttonSize);
        top: var(--buttonHalf);
      }

      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      .slider {
        position: absolute;
        border-radius: var(--buttonSize);
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--itemInactive);
        width: calc(var(--buttonSize) * 3);                 
        transition: .4s;
      }

      .slider:before {
        position: absolute;
        border-radius: 50%;
        content: "";
        height: var(--buttonSize);
        width: var(--buttonSize);
        left: var(--buttonQuart);
        background: var(--inputBackground);
        transition: .4s;
      }

      input:checked + .slider {
        background-color: var(--buttonActive);
      }

      input:checked + .slider:before {
        transform: translateX(calc(var(--buttonSize)*1.5));
      }
      
      #applog, #storedLog {
        height:50vh;
        width:90%;
        border:2px solid var(--itemBorder);
        overflow:auto;
        background: var(--inputBackground); 
      }
      
      select {
        border: 1px solid var(--menuBackground);
        font-size: var(--inputSize);
        outline: 0;
        border-radius: var(--buttonQuart);
        margin-top: 2px;
      }
      
      .selectField {
         height: calc(var(--inputSize) * 1.5);
      }
      
      table {
        border-collapse:collapse; 
        table-layout:fixed;
        background: var(--menuBackground);
        text-align: left;
      }
      
      th, td {
        font-weight:bold; 
      }
      
      .config-group th, .config-group td {
        border: 0;
        padding: var(--buttonHalf) var(--buttonHalf) 0 var(--buttonHalf); 
        padding-left: var(--buttonSize);
        line-height: var(--buttonDbl);
        font-size: var(--buttonSize);
      } 
      
      .configGroup td input[type="number"] {
        font-size: var(--buttonSize);
      } 
      
      input.configItem[type="radio"] {
        min-width: var(--buttonSize); 
      }
      
      input.configItem[type="number"] {
        min-width: calc(var(--buttonSize) * 3); 
        width: calc(var(--buttonSize) * 3); 
      }
      
      .svgCols {
        width: calc(var(--buttonSize) * 9);  
        height: calc(var(--buttonSize) * 2.5);  
        fill: var(--buttonLabel);
        font-size: calc(var(--buttonSize) * 1.5);
      }   
      
      .upperText {
        transform: translate(50%,30%);  
      }
      
      .lowerText {
        transform: translate(50%,70%);  
      }
      
      .midText {
        transform: translate(50%,50%); 
      }
      
    </style>
  </head>
  
  <body>
    <div class="tab fixed">
      <button class="tablinks active" name="ShowLog">Show Log</button>
      <button class="tablinks" name="EditConfig">Edit Config</button>
      <button class="tablinks" name="OTAUpload">OTA Upload</button>
    </div>
    <br><br><br>
    <div id="ShowLog" class="tabcontent" style="display:block">
      <br>
      <div class="grid-cols3">
        <div>
          <svg>
            <rect/>
            <text id="clearWSlog" class="midText">Clear Log</text>
          </svg>
        </div>
        <div class="input-group" id="dbg-group" style="text-align: left">
          <label for="dbgVerbose" class="header" title="Set verbose logging">Verbose:</label>
          <div class="switch">
            <input id="dbgVerbose" type="checkbox">
            <label title="Outputs additional information to log" class="slider" for="dbgVerbose"></label>
          </div>
        </div>
      </div>
      <br>
      <div id="applog"></div>
      <br><br>
      <div class="grid-cols3">
        <div>
        <svg>
          <rect/>
            <text class="midText" id="refreshLog">Refresh Log</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="midText" id="clearLog">Clear Log</text>
          </svg>
        </div>
      </div>
      <br>
      <div id="storedLog"></div>
    </div>
    <br>
    
    <div id="EditConfig" class="tabcontent">
      <br>
      <div class="header">Control</div>
      <br>
      <div class="grid-cols3">
        <div>
          <svg class="svgCols">
            <rect/>
            <text id="reset" class="midText">Reboot ESP</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols">
            <rect/>
            <text id="deldata" class="midText">Reload /data</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols">
            <rect/>
            <text id="clear" class="midText">Clear NVS</text>
          </svg>
        </div>
        <div class="cfgTitle">
          <br>
          <div class="header">Settings</div>
          <div class="subheader">Press a button to view or modify settings (changed values are not validated)</div>
          <div class="subheader">Press Save button to make changes permanent</div>
          <br>
        </div>
        <div>
          <svg class="svgCols">
            <rect/>
            <text id="wifi" class="midText">Wifi</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols">
            <rect/>
            <text id="peripherals" class="midText">Peripherals</text>
          </svg>
        </div>
        <div>
          <svg class="svgCols">
            <rect/>
      	    <text id="save" class="midText">Save</text>
          </svg>
        </div>
      </div>
      <div>
        <p class='config-group'  id='Cfg'></p>
      </div>
    </div>
           
    <div id="OTAUpload" class="tabcontent">
      <br><br>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input class="local" type="file" name="otafile" id="otafile">
        <br><br>
        <progress id="progressOta" value="0" max="100" ></progress>%
        <div class="subheader" id="status"></div>
        <p id="loaded_n_total"></p>
      </form>
    </div>
        
    <div class="alertMsg">
      <span id="alertText"></span>
    </div>
    
    <script>
      'use strict'
      
      // web server ports, automatically derive from entered port number
      const webPort = !window.location.port ? "80" : window.location.port;
      const otaPort = String(+webPort + 1);
      
      let refreshInterval = 30000;
      
      function processStatus(dest, key, value, fromUser = true) {
        // process change to status value
        if (dest == ID) {
          // operation based on ID
          if (key == "wifi") getConfig("0");
          else if (key == "hostName") {
            document.title = value;
            if (fromUser) sendControl(key, value);
          }
          else if (key == "otafile") otaUploadFile();
          else if (key == "alertMsg") showAlert(value);
          else if (key == "clearWSlog") $('#applog').innerHTML = "";
          else if (key == "clearLog") clearLog();
          else if (key == "refreshLog") getLog();
          else if (key == "refreshVal") refreshInterval = value * 1000; 
          else if (key == "clockUTC") checkTime(value);
          else if (key == "peripherals") getConfig("0123");
          // remaining changes are passed thru to app
          else if (fromUser) sendControl(key, value);     
        }
        else if (dest == CLASS) {}
      }
      
      function configStatus(refresh) {
        if (!refresh) loadStatus("");
      }
      
      /****************************************************/
      
      // common script config
      const doCustomInit = false;
      const doInitWebSocket = true;
      const doLoadStatus = false
      const doRefreshTimer = false;
      const doCustomSync = false;
      const doHeartbeat = true;

      const scriptFiles = ['/web?common.js', 'C:/MyStuff/Arduino/CommonMaster/Latest/common.js']; 
      for (let i = 0; i < scriptFiles.length; i++) {
        const scriptElement = document.createElement('script');
        scriptElement.src = scriptFiles[i];
        document.body.appendChild(scriptElement);
      }

      window.addEventListener('load', function() {
        initialise();
      });
      
    </script>
  </body>
</html>
